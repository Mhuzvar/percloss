import numpy as np
import matplotlib.pyplot as plt
import scipy

def Acurve(N=63, fs=44100, mode=0):
    """
    magnitude response usable in frequency sampling method for FIR filter design.
    arguments:
        nvals       ...output vector length
        fs          ...sampling frequency
        mode        ...response definition
                            0   ..ITU-R BS.468-4
    outputs:
        vector of magnitudes
    """
    
    """
    1. get magnitude response (interp from available data)
    3. calculate filter coeffs 0..M using formula 7.30 from book
    4. calculate the rest of the coefficients using formula 7.31 (from the book)
    """
    
    match mode:
        case 0:
            fd = (31.5, 63, 100, 200, 400, 800, 1000, 2000, 3150, 4000, 5000,
                  6300, 7100, 8000, 9000, 10000, 12500, 14000, 16000, 20000, 31500)
            rd = (-29.9, -23.9, -19.8, -13.8, -7.8, -1.9, 0, 5.6, 9, 10.5, 11.7,
                  12.2, 12, 11.4, 10.1, 8.1, 0, -5.3, -11.7, -22.2, -42.7)
        case _:
            raise Exception(f"Wrong mode '{mode}' provided!")
    M = (N-1)//2    
    
    fn = np.linspace(0,fs//2,M+1)
    fnlog = np.log10(fn[1:])
    
    fdlog = np.log10(np.asarray(fd))
    fdlog = np.insert(fdlog, 0, fdlog[0]-30)
    rdmod = np.insert(np.asarray(rd), 0, rd[0]-600)
    rnlog = np.interp(fnlog, fdlog, rdmod)

    H = np.insert(np.power(10, rnlog/20), 0, 0)

    h = np.zeros(N)

    k_ = np.linspace(1, M, M, endpoint=True)
    for n in range(M+1):
        h[n] = (1/(N))*(H[0]+2*np.sum(H[1:M+1]*np.cos((2*np.pi*k_*(n-M))/N)))
        h[(2*M)-n] = h[n]
    
    
    if False:
        plt.semilogx(fd, rd)
        plt.xlim([20, 2e4])
        plt.ylim([-50,20])
        plt.grid()
        plt.semilogx(fn[1:],rnlog)
        plt.xlim([20, 2e4])
        plt.ylim([-50,20])
        plt.grid()
        plt.show()
        plt.plot(fn,H)
        plt.xlim([20, 2e4])
        plt.grid()
        plt.show()
        plt.plot(h)
        plt.show()
        plt.semilogx(fd, rd)
        plt.semilogx(fn,10*np.log10(np.abs(np.fft.fft(h))**2)[0:M+1])
        plt.title(f"N={N}")
        plt.xlim([20, 2e4])
        plt.show()

    return h

def Bark_matrix():
    # as specified by ITU-R BS.1387-2

    fl_48 = np.linspace(0,48000,2048, endpoint=False, retstep=True)
    fl_44 = np.linspace(0,44100,int(2048*(441/480)), endpoint=False, retstep=True)
    flr_48 = [k*23.4375 for k in range(2048)]

    B_bands = ['0 80 91.708 103.445 23.445',
                '1 103.445 115.216 127.023 23.577',
                '2 127.023 138.87 150.762 23.739',
                '3 150.762 162.702 174.694 23.932',
                '4 174.694 186.742 198.849 24.155',
                '5 198.849 211.019 223.257 24.408',
                '6 223.257 235.566 247.95 24.693',
                '7 247.95 260.413 272.959 25.009',
                '8 272.959 285.593 298.317 25.358',
                '9 298.317 311.136 324.055 25.738',
                '10 324.055 337.077 350.207 26.151',
                '11 350.207 363.448 376.805 26.598',
                '12 376.805 390.282 403.884 27.079',
                '13 403.884 417.614 431.478 27.594',
                '14 431.478 445.479 459.622 28.145',
                '15 459.622 473.912 488.353 28.731',
                '16 488.353 502.95 517.707 29.354',
                '17 517.707 532.629 547.721 30.014',
                '18 547.721 562.988 578.434 30.713',
                '19 578.434 594.065 609.885 31.451',
                '20 609.885 625.899 642.114 32.229',
                '21 642.114 658.533 675.161 33.048',
                '22 675.161 692.006 709.071 33.909',
                '23 709.071 726.362 743.884 34.814',
                '24 743.884 761.644 779.647 35.763',
                '25 779.647 797.898 816.404 36.757',
                '26 816.404 835.17 854.203 37.799',
                '27 854.203 873.508 893.091 38.888',
                '28 893.091 912.959 933.119 40.028',
                '29 933.119 953.576 974.336 41.218',
                '30 974.336 995.408 1016.797 42.461',
                '31 1016.797 1038.511 1060.555 43.758',
                '32 1060.555 1082.938 1105.666 45.111',
                '33 1105.666 1128.746 1152.187 46.521',
                '34 1152.187 1175.995 1200.178 47.991',
                '35 1200.178 1224.744 1249.7 49.522',
                '36 1249.7 1275.055 1300.816 51.116',
                '37 1300.816 1326.992 1353.592 52.776',
                '38 1353.592 1380.623 1408.094 54.502',
                '39 1408.094 1436.014 1464.392 56.298',
                '40 1464.392 1493.237 1522.559 58.167',
                '41 1522.559 1552.366 1582.668 60.109',
                '42 1582.668 1613.474 1644.795 62.128',
                '43 1644.795 1676.641 1709.021 64.226',
                '44 1709.021 1741.946 1775.427 66.406',
                '45 1775.427 1809.474 1844.098 68.671',
                '46 1844.098 1879.31 1915.121 71.023',
                '47 1915.121 1951.543 1988.587 73.466',
                '48 1988.587 2026.266 2064.59 76.003',
                '49 2064.59 2103.573 2143.227 78.637',
                '50 2143.227 2183.564 2224.597 81.371',
                '51 2224.597 2266.34 2308.806 84.208',
                '52 2308.806 2352.008 2395.959 87.154',
                '53 2395.959 2440.675 2486.169 90.21',
                '54 2486.169 2532.456 2579.551 93.382',
                '55 2579.551 2627.468 2676.223 96.672',
                '56 2676.223 2725.832 2776.309 100.086',
                '57 2776.309 2827.672 2879.937 103.627',
                '58 2879.937 2933.12 2987.238 107.302',
                '59 2987.238 3042.309 3098.35 111.112',
                '60 3098.35 3155.379 3213.415 115.065',
                '61 3213.415 3272.475 3332.579 119.164',
                '62 3332.579 3393.745 3455.993 123.415',
                '63 3455.993 3519.344 3583.817 127.823',
                '64 3583.817 3649.432 3716.212 132.395',
                '65 3716.212 3784.176 3853.348 137.136',
                '66 3853.348 3923.748 3995.399 142.051',
                '67 3995.399 4068.324 4142.547 147.148',
                '68 4142.547 4218.09 4294.979 152.432',
                '69 4294.979 4373.237 4452.89 157.911',
                '70 4452.89 4533.963 4616.482 163.592',
                '71 4616.482 4700.473 4785.962 169.48',
                '72 4785.962 4872.978 4961.548 175.585',
                '73 4961.548 5051.7 5143.463 181.915',
                '74 5143.463 5236.866 5331.939 188.476',
                '75 5331.939 5428.712 5527.217 195.278',
                '76 5527.217 5627.484 5729.545 202.329',
                '77 5729.545 5833.434 5939.183 209.637',
                '78 5939.183 6046.825 6156.396 217.214',
                '79 6156.396 6267.931 6381.463 225.067',
                '80 6381.463 6497.031 6614.671 233.208',
                '81 6614.671 6734.42 6856.316 241.646',
                '82 6856.316 6980.399 7106.708 250.392',
                '83 7106.708 7235.284 7366.166 259.458',
                '84 7366.166 7499.397 7635.02 268.854',
                '85 7635.02 7773.077 7913.614 278.594',
                '86 7913.614 8056.673 8202.302 288.688',
                '87 8202.302 8350.547 8501.454 299.152',
                '88 8501.454 8655.072 8811.45 309.996',
                '89 8811.45 8970.639 9132.688 321.237',
                '90 9132.688 9297.648 9465.574 332.887',
                '91 9465.574 9636.52 9810.536 344.962',
                '92 9810.536 9987.683 10168.013 357.477',
                '93 10168.013 10351.586 10538.46 370.447',
                '94 10538.46 10728.695 10922.351 383.891',
                '95 10922.351 11119.49 11320.175 397.824',
                '96 11320.175 11524.47 11732.438 412.264',
                '97 11732.438 11944.149 12159.67 427.231',
                '98 12159.67 12379.066 12602.412 442.742',
                '99 12602.412 12829.775 13061.229 458.817',
                '100 13061.229 13296.85 13536.71 475.48',
                '101 13536.71 13780.887 14029.458 492.748',
                '102 14029.458 14282.503 14540.103 510.645',
                '103 14540.103 14802.338 15069.295 529.192',
                '104 15069.295 15341.057 15617.71 548.415',
                '105 15617.71 15899.345 16186.049 568.339',
                '106 16186.049 16477.914 16775.035 588.986',
                '107 16775.035 17077.504 17385.42 610.385',
                '108 17385.42 17690.045 18000 614.58']
    
    for i in range(len(B_bands)):
        x = B_bands[i].split(' ')
        B_bands[i] = (float(x[1]), float(x[3]))

    Bark = np.zeros((109,941))
    Bark_48 = np.zeros((109,1025))
    min_j = 0
    min_k = 0
    for i in range(len(B_bands)):
        for j in range(min_j,len(fl_44[0])):
            if (fl_44[0][j] >= B_bands[i][0]) & (fl_44[0][j] < B_bands[i][1]):
                Bark[i][j]+=1
                min_j+=1
        for k in range(min_k,len(fl_48[0])):
            if (fl_48[0][k] >= B_bands[i][0]) & (fl_48[0][k] < B_bands[i][1]):
                Bark_48[i][k]+=1
                min_k+=1
    prnt = ''
    for i, row in enumerate(Bark):
        prnt+='['
        for j in range(len(row)):
            prnt+=f'{int(row[j])},'
        prnt=prnt[:-1]
        prnt+='],\n'
    prnt=prnt[:-2]
    with open('Bark_matrix.txt', 'w') as file:
        file.write(prnt)

    print(np.sum(Bark, axis=0))
    print(np.sum(Bark_48, axis=0))


    #np.zeros()

if __name__=="__main__":
    #for i in range(8, 12):
    #    Acurve(N=(2**i)-1)

    Bark_matrix()
